/************************************************************************
  This software is subject to the terms of the IBM alphaBeans with Source 
  License Agreement available at 
  www.software.ibm.com/developer/alphabeans/source/license.html.
  
  Copyright (c) 1999 IBM Corporation and others. All rights reserved. 
  
  You must accept the terms of that agreement to use this software.
*************************************************************************/
  
package com.ibm.network.ftp.ui;
/**
 * This class was generated by a SmartGuide.
 * 
 */
 class TopPanel extends java.awt.Panel implements java.awt.event.ActionListener {
	private static final long serialVersionUID = -23486913682903027L;
	private java.awt.Button ivjbutChangeDir = null;
    private java.awt.Button ivjbutParentDir = null;
    private java.awt.Button ivjbutConnect = null;
    private java.awt.Button ivjbutDelete = null;
    private java.awt.Button ivjbutDisconnect = null;
    private java.awt.Button ivjbutGet = null;
    private java.awt.Button ivjbutMakedir = null;
    private java.awt.Button ivjbutPut = null;
    private java.awt.Button ivjbutRename = null;
    
    //For calling the parent methods
    private FTPUI myParent;
/**
 * Constructor
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public TopPanel() {
    super();
    initialize();
}
/**
 * This method was created by a SmartGuide.
 * @param container FTPUI.FTPUIBean
 */
public TopPanel(FTPUI container ) {
    super();
    this.myParent=container;
    initialize();
    
}
/**
 * TopPanel constructor comment.
 * @param layout java.awt.LayoutManager
 */
public TopPanel(java.awt.LayoutManager layout) {
    super(layout);
}
/**
 * actionPerformed method comment.
 */
@Override
public void actionPerformed(java.awt.event.ActionEvent e) {
        //if the source is getbutParentDir
        // call parent's changeDir("..") method
        if (e.getSource().equals(getbutParentDir()))
        {
            this.myParent.changeDir("..");
        }
        else
        {   
            //Pass this ActionEvent to the Parent
            this.myParent.eventFromToolbar(e);
        }   
}
/**
 * This method was created by a SmartGuide.
 * @param value boolean
 */
public void enableConnectButton (boolean value ) {
    getbutDisconnect().setEnabled(value);
    return;
}
    //These buttons are Enabled when the file list is not empty 
    //else Disabled
    public void enableFileButtons(boolean value)
    {
        getbutDelete().setEnabled(value);
        getbutRename().setEnabled(value);
        getbutMakedir().setEnabled(value);
        getbutChangeDir().setEnabled(value);
        getbutParentDir().setEnabled(value);
        
    }   
    //These buttons are Enabled when the Connection is made 
    //else Disabled
    public void enableRemoteButtons(boolean value)
    {
        //getbutDisconnect().setEnabled(value);
        getbutGet().setEnabled(value);
        getbutPut().setEnabled(value);
    }   
/**
 * Return the butChangeDir property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutChangeDir() {
    if (ivjbutChangeDir == null) {
        try {
            ivjbutChangeDir = new java.awt.Button();
            ivjbutChangeDir.setName("butChangeDir");
            ivjbutChangeDir.setActionCommand("changeDir");
            ivjbutChangeDir.setLabel(" ChDir ");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutChangeDir;
}
/**
 * Return the butConnect property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutConnect() {
    if (ivjbutConnect == null) {
        try {
            ivjbutConnect = new java.awt.Button();
            ivjbutConnect.setName("butConnect");
            ivjbutConnect.setLabel("Connect");
            ivjbutConnect.setActionCommand("connect");
            
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutConnect;
}
/**
 * Return the butDelete property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutDelete() {
    if (ivjbutDelete == null) {
        try {
            ivjbutDelete = new java.awt.Button();
            ivjbutDelete.setName("butDelete");
            ivjbutDelete.setActionCommand("deleteFile");
            ivjbutDelete.setLabel("Delete");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutDelete;
}
/**
 * Return the butDisconnect property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutDisconnect() {
    if (ivjbutDisconnect == null) {
        try {
            ivjbutDisconnect = new java.awt.Button();
            ivjbutDisconnect.setName("butDisconnect");
            ivjbutDisconnect.setActionCommand("disconnect");
            ivjbutDisconnect.setLabel("Disconn");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutDisconnect;
}
/**
 * Return the butGet property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutGet() {
    if (ivjbutGet == null) {
        try {
            ivjbutGet = new java.awt.Button();
            ivjbutGet.setName("butGet");
            ivjbutGet.setActionCommand("get");
            ivjbutGet.setLabel("GetFile");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutGet;
}
/**
 * Return the butMakedir property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutMakedir() {
    if (ivjbutMakedir == null) {
        try {
            ivjbutMakedir = new java.awt.Button();
            ivjbutMakedir.setName("butMakedir");
            ivjbutMakedir.setActionCommand("makeDir");
            ivjbutMakedir.setLabel(" MkDir ");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutMakedir;
}
/**
 * Return the butParentDir property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutParentDir() {
    if (ivjbutParentDir == null) {
        try {
            ivjbutParentDir = new java.awt.Button();
            ivjbutParentDir.setName("butParentDir");
            ivjbutParentDir.setActionCommand("ParentDir");
            ivjbutParentDir.setLabel("ParentDir");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutParentDir;
}
/**
 * Return the butPut property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutPut() {
    if (ivjbutPut == null) {
        try {
            ivjbutPut = new java.awt.Button();
            ivjbutPut.setName("butPut");
            ivjbutPut.setActionCommand("put");
            ivjbutPut.setLabel("PutFile");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutPut;
}
/**
 * Return the butRename property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getbutRename() {
    if (ivjbutRename == null) {
        try {
            ivjbutRename = new java.awt.Button();
            ivjbutRename.setName("butRename");
            ivjbutRename.setActionCommand("rename");
            ivjbutRename.setLabel("Rename");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjbutRename;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {
    /* Uncomment the following lines to print uncaught exceptions to stdout */
    // System.out.println("--------- UNCAUGHT EXCEPTION ---------");
    // exception.printStackTrace(System.out);
}
/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
    // user code begin {1}
    // user code end
    java.awt.GridBagConstraints constraintsbutConnect = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsbutDisconnect = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsbutGet = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsbutPut = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsbutRename = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsbutDelete = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsbutMakedir = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsbutChangeDir = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsbutClearStatus = new java.awt.GridBagConstraints();
    setName("TopPanel");
    setName("TopPanel");
    setLayout(new java.awt.GridBagLayout());
    setBackground(java.awt.Color.lightGray);
    setSize(513, 28);
    constraintsbutConnect.gridx = 0; constraintsbutConnect.gridy = 0;
    constraintsbutConnect.gridwidth = 1; constraintsbutConnect.gridheight = 1;
    constraintsbutConnect.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutConnect.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutConnect.weightx = 1.0;
    constraintsbutConnect.weighty = 0.0;
    constraintsbutConnect.insets = new java.awt.Insets(2, 5, 2, 0);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutConnect(), constraintsbutConnect);
    this.add(getbutConnect());
    
    constraintsbutDisconnect.gridx = 1; constraintsbutDisconnect.gridy = 0;
    constraintsbutDisconnect.gridwidth = 1; constraintsbutDisconnect.gridheight = 1;
    constraintsbutDisconnect.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutDisconnect.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutDisconnect.weightx = 1.0;
    constraintsbutDisconnect.weighty = 0.0;
    constraintsbutDisconnect.insets = new java.awt.Insets(2, 0, 2, 0);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutDisconnect(), constraintsbutDisconnect);
    this.add(getbutDisconnect());
    constraintsbutGet.gridx = 2; constraintsbutGet.gridy = 0;
    constraintsbutGet.gridwidth = 1; constraintsbutGet.gridheight = 1;
    constraintsbutGet.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutGet.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutGet.weightx = 1.0;
    constraintsbutGet.weighty = 0.0;
    constraintsbutGet.insets = new java.awt.Insets(2, 0, 2, 0);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutGet(), constraintsbutGet);
    this.add(getbutGet());
    constraintsbutPut.gridx = 3; constraintsbutPut.gridy = 0;
    constraintsbutPut.gridwidth = 1; constraintsbutPut.gridheight = 1;
    constraintsbutPut.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutPut.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutPut.weightx = 1.0;
    constraintsbutPut.weighty = 0.0;
    constraintsbutPut.insets = new java.awt.Insets(2, 0, 2, 0);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutPut(), constraintsbutPut);
    this.add(getbutPut());
    constraintsbutRename.gridx = 4; constraintsbutRename.gridy = 0;
    constraintsbutRename.gridwidth = 1; constraintsbutRename.gridheight = 1;
    constraintsbutRename.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutRename.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutRename.weightx = 1.0;
    constraintsbutRename.weighty = 0.0;
    constraintsbutRename.insets = new java.awt.Insets(2, 0, 2, 0);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutRename(), constraintsbutRename);
    this.add(getbutRename());
    constraintsbutDelete.gridx = 5; constraintsbutDelete.gridy = 0;
    constraintsbutDelete.gridwidth = 1; constraintsbutDelete.gridheight = 1;
    constraintsbutDelete.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutDelete.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutDelete.weightx = 1.0;
    constraintsbutDelete.weighty = 0.0;
    constraintsbutDelete.insets = new java.awt.Insets(2, 0, 2, 0);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutDelete(), constraintsbutDelete);
    this.add(getbutDelete());
    constraintsbutMakedir.gridx = 6; constraintsbutMakedir.gridy = 0;
    constraintsbutMakedir.gridwidth = 1; constraintsbutMakedir.gridheight = 1;
    constraintsbutMakedir.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutMakedir.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutMakedir.weightx = 1.0;
    constraintsbutMakedir.weighty = 0.0;
    constraintsbutMakedir.insets = new java.awt.Insets(2, 0, 2, 0);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutMakedir(), constraintsbutMakedir);
    this.add(getbutMakedir());
    constraintsbutChangeDir.gridx = 7; constraintsbutChangeDir.gridy = 0;
    constraintsbutChangeDir.gridwidth = 1; constraintsbutChangeDir.gridheight = 1;
    constraintsbutChangeDir.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutChangeDir.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutChangeDir.weightx = 1.0;
    constraintsbutChangeDir.weighty = 0.0;
    constraintsbutChangeDir.insets = new java.awt.Insets(2, 0, 2, 0);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutChangeDir(), constraintsbutChangeDir);
    this.add(getbutChangeDir());
    constraintsbutClearStatus.gridx = 8; constraintsbutClearStatus.gridy = 0;
    constraintsbutClearStatus.gridwidth = 1; constraintsbutClearStatus.gridheight = 1;
    constraintsbutClearStatus.fill = java.awt.GridBagConstraints.BOTH;
    constraintsbutClearStatus.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsbutClearStatus.weightx = 1.0;
    constraintsbutClearStatus.weighty = 0.0;
    constraintsbutClearStatus.insets = new java.awt.Insets(2, 0, 2, 5);
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getbutParentDir(), constraintsbutClearStatus);
    this.add(getbutParentDir());
    // user code begin {2}
    
    //Add ActionListener for all the buttons in the toolbar 
    getbutChangeDir().addActionListener(this);
    getbutParentDir().addActionListener(this);
    getbutConnect().addActionListener(this);
    getbutDelete().addActionListener(this);
    getbutDisconnect().addActionListener(this);
    getbutGet().addActionListener(this);
    getbutMakedir().addActionListener(this);
    getbutPut().addActionListener(this);
    getbutRename().addActionListener(this);                 
    
    // user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
 /*
public static void main(java.lang.String[] args) {
    try {
        java.awt.Frame frame;
        try {
            Class aFrameClass = Class.forName("uvm.abt.edit.TestFrame");
            frame = (java.awt.Frame)aFrameClass.newInstance();
        } catch (java.lang.Throwable ivjExc) {
            frame = new java.awt.Frame();
        }
        com.ibm.network.ftp.ui.TopPanel aTopPanel = new com.ibm.network.ftp.ui.TopPanel();
        frame.add("Center", aTopPanel);
        frame.setSize(aTopPanel.getSize());
        frame.setVisible(true);
    } catch (Throwable exception) {
        System.err.println("Exception occurred in main() of java.awt.Panel");
    }
}
*/
    /**
    * Sets the Background of all the buttons in the Toolbar.
    *
    * @param    newColor java.awt.Color
    */
    public void setToolbarBackground(java.awt.Color newColor)
    {
        //Set all the buttons' Background color
        
        this.getbutChangeDir().setBackground(newColor);
        this.getbutParentDir().setBackground(newColor);
        this.getbutConnect().setBackground(newColor);
        this.getbutDelete().setBackground(newColor);
        this.getbutDisconnect().setBackground(newColor);
        this.getbutGet().setBackground(newColor);
        this.getbutMakedir().setBackground(newColor);
        this.getbutPut().setBackground(newColor);
        this.getbutRename().setBackground(newColor);
        return;
        
    }           
    /**
    * Sets the Font of all the buttons in the Toolbar.
    *
    * @param    newFont java.awt.Font
    */
    public void setToolbarFont(java.awt.Font newFont)
    {
        //Set all the buttons' Font Font
        
        this.getbutChangeDir().setFont(newFont);
        this.getbutParentDir().setFont(newFont);
        this.getbutConnect().setFont(newFont);
        this.getbutDelete().setFont(newFont);
        this.getbutDisconnect().setFont(newFont);
        this.getbutGet().setFont(newFont);
        this.getbutMakedir().setFont(newFont);
        this.getbutPut().setFont(newFont);
        this.getbutRename().setFont(newFont);
        return;
        
    }               
    /**
    * Sets the Foreground of all the buttons in the Toolbar.
    *
    * @param    newColor java.awt.Color
    */
    public void setToolbarForeground(java.awt.Color newColor)
    {
        //Set all the buttons' Foreground color
        
        this.getbutChangeDir().setForeground(newColor);
        this.getbutParentDir().setForeground(newColor);
        this.getbutConnect().setForeground(newColor);
        this.getbutDelete().setForeground(newColor);
        this.getbutDisconnect().setForeground(newColor);
        this.getbutGet().setForeground(newColor);
        this.getbutMakedir().setForeground(newColor);
        this.getbutPut().setForeground(newColor);
        this.getbutRename().setForeground(newColor);
        return;
        
    }       
}
