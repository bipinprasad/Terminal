/************************************************************************
  This software is subject to the terms of the IBM alphaBeans with Source 
  License Agreement available at 
  www.software.ibm.com/developer/alphabeans/source/license.html.
  
  Copyright (c) 1999 IBM Corporation and others. All rights reserved. 
  
  You must accept the terms of that agreement to use this software.
*************************************************************************/
  
package com.ibm.network.ftp.protocol;
import java.util.Vector;
import com.ibm.network.ftp.event.*;
/**
 * This class was generated by a SmartGuide.
 * 
 */
class CommandInterpreter {
	private String command;
	private Vector<String> parameters;
	private boolean remote;
	private FTPProtocol parent;
//	private static CommandInterpreter instance=null;
/**
 * This method was created by a SmartGuide.
 */
CommandInterpreter (FTPProtocol parent) {
	this.parent=parent;
}
/**
 * This method was created by a SmartGuide.
 * @return FTPProtocolBean.CommandInterpreter
 */
/** BIPIN
public static CommandInterpreter getCommandInterpreter(FTPProtocol parent ) {
	//if instance is null create a new instance or else return
	//same instance.
	if(instance==null){
		instance=new CommandInterpreter(parent);
	}
	return instance;
	return new CommandInterpreter(parent);
}
*/
/**
 * This method was created by a SmartGuide.
 * @param cevent events.CommandEvent
 */
public void interpretCommand (CommandEvent cevent ) {
	this.command=cevent.getCommand();
	this.parameters=cevent.getParameters();
	this.remote=cevent.isRemote();
	
	// the if else statement below will find out what the command is 
	// and call the proper method of parent
	
	if(command.equals("abort")){
		parent.abort();
	}
	else if(command.equals("changeDir")){
		parent.changeDir((String)parameters.elementAt(0),remote);
	}
	else if(command.equals("configureSocks")){
		parent.configureSocks((String)parameters.elementAt(0),
				(String)parameters.elementAt(1));
	}
	else if(command.equals("connect")){
		parent.connect((String)parameters.elementAt(0));
	}
	else if(command.equals("deleteFile")){
		parent.deleteFile((String)parameters.elementAt(0),remote);
	}
	else if(command.equals("disconnect")){
		parent.disconnect();
	}
	else if(command.equals("fileList")){
		parent.fileList(remote);
	}
	else if(command.equals("getCurrentDir")){
		parent.getCurrentDir(remote);
	}
	else if(command.equals("getFile")){
		String localFile = ((parameters.size()>1) ? (String)parameters.elementAt(1): null);
		parent.getFile((String)parameters.elementAt(0), localFile);
	}
	
	else if(command.equals("getStatus")){
		parent.status();
	}
	else if(command.equals("login")){
		parent.login((String)parameters.elementAt(0),
				(String)parameters.elementAt(1));
	}
	else if(command.equals("makeDir")){
		parent.makeDir((String)parameters.elementAt(0),remote);
	}
	else if(command.equals("putFile")){
		String remoteFile = ((parameters.size()>1) ? (String)parameters.elementAt(1): null);
		parent.putFile((String)parameters.elementAt(0), remoteFile);
	}
	else if(command.equals("removeDir")){
		parent.removeDir((String)parameters.elementAt(0),remote);
	}
	else if(command.equals("rename")){
		parent.rename((String)parameters.elementAt(0),
				(String)parameters.elementAt(1),remote);
	}
	else if(command.equals("setType")){
		parent.setType((String)parameters.elementAt(0));
	}
	else {
		//System.out.println("unrecognized command");
	}				
				
													
}
/**
 * This method was created by a SmartGuide.
 * @param command java.lang.String
 */
public void setCommand (java.lang.String command ) {
	this.command=command;
	return;
}
}
	
