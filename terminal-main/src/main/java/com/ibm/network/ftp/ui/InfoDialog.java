/************************************************************************
  This software is subject to the terms of the IBM alphaBeans with Source 
  License Agreement available at 
  www.software.ibm.com/developer/alphabeans/source/license.html.
  
  Copyright (c) 1999 IBM Corporation and others. All rights reserved. 
  
  You must accept the terms of that agreement to use this software.
*************************************************************************/
  
package com.ibm.network.ftp.ui;
/**
 * This class was generated by a SmartGuide.
 * 
 */
class InfoDialog extends java.awt.Dialog implements java.awt.event.ActionListener, java.awt.event.WindowListener,java.awt.event.KeyListener {
	private static final long serialVersionUID = 894823154044109210L;
	private java.awt.Button ivjcanBut = null;
    private java.awt.Label ivjlabMessage = null;
    private java.awt.Button ivjokBut = null;
    private java.awt.Button ivjokBut2 = null;
    private java.awt.Panel ivjokcanPanel = null;
    //private java.awt.FlowLayout ivjokcanPanelFlowLayout = null;
    private java.awt.Panel ivjokPanel = null;
    
    
    //For passing the parameter to the parent
    private FTPUI myParent;
    
    //For showing 2 different panels wrt the message
    private boolean butParameter = true;
/**
 * Constructor
 * @param parent Symbol
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
public InfoDialog(java.awt.Frame parent) {
    super(parent);
    initialize();
}
/**
 * InfoDialog constructor comment.
 * @param parent java.awt.Frame
 * @param title java.lang.String
 */
public InfoDialog(java.awt.Frame parent, String title) {
    super(parent, title);
    initialize();
}
/**
 * This method was created by a SmartGuide.
 */
public InfoDialog (java.awt.Frame frm,String title,FTPUI container,java.lang.String Info,boolean okCanPanel ) {
    super(frm,title);
    
    //set the parent for passing the acknowledgement 
    //from the user ,for any operation
    this.myParent=container;
    
    //Set the message label text
    this.getlabMessage().setText(Info);
    
    //Set the parameter for showing the Ok & Cancel buttons
    this.butParameter=okCanPanel;
    
    initialize();
}
/**
 * InfoDialog constructor comment.
 * @param parent java.awt.Frame
 * @param title java.lang.String
 * @param modal boolean
 */
public InfoDialog(java.awt.Frame parent, String title, boolean modal) {
    super(parent, title, modal);
        initialize();
}
/**
 * InfoDialog constructor comment.
 * @param parent java.awt.Frame
 * @param modal boolean
 */
public InfoDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initialize();
}
/**
 * actionPerformed method comment.
 */
@Override
public void actionPerformed(java.awt.event.ActionEvent e) {
    if (e.getSource().equals(getokBut()) || e.getSource().equals(getokBut2())){
        //Set the response as true
        this.myParent.setInfoResponse("true");
    }
    else if (e.getSource().equals(getcanBut()))
    {
        this.myParent.setInfoResponse("false");
    }
    this.dispose(); 
        
}
/**
 * conn0:  (InfoDialog.window.windowClosing(java.awt.event.WindowEvent) --> InfoDialog.dispose())
 * @param arg1 java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void conn0(java.awt.event.WindowEvent arg1) {
    try {
        // user code begin {1}
        // user code end
        this.dispose();
        // user code begin {2}
        // user code end
    } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
        handleException(ivjExc);
    }
}
/**
 * Return the canBut property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getcanBut() {
    if (ivjcanBut == null) {
        try {
            ivjcanBut = new java.awt.Button();
            ivjcanBut.setName("canBut");
            ivjcanBut.setLabel("   No  ");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjcanBut;
}
/**
 * Return the labMessage property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Label getlabMessage() {
    if (ivjlabMessage == null) {
        try {
            ivjlabMessage = new java.awt.Label();
            ivjlabMessage.setName("labMessage");
            ivjlabMessage.setAlignment(java.awt.Label.CENTER);
            ivjlabMessage.setText("Message");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjlabMessage;
}
/**
 * Return the okBut property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getokBut() {
    if (ivjokBut == null) {
        try {
            ivjokBut = new java.awt.Button();
            ivjokBut.setName("okBut");
            ivjokBut.setLabel("  Yes  ");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjokBut;
}
/**
 * Return the okBut2 property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Button getokBut2() {
    if (ivjokBut2 == null) {
        try {
            ivjokBut2 = new java.awt.Button();
            ivjokBut2.setName("okBut2");
            ivjokBut2.setLabel("     Ok     ");
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjokBut2;
}
/**
 * Return the okcanPanel property value.
 * @return java.awt.Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Panel getokcanPanel() {
    if (ivjokcanPanel == null) {
        try {
            ivjokcanPanel = new java.awt.Panel();
            ivjokcanPanel.setName("okcanPanel");
            ivjokcanPanel.setLayout(getokcanPanelFlowLayout());
            ivjokcanPanel.add(getokBut(), getokBut().getName());
            ivjokcanPanel.add(getcanBut(), getcanBut().getName());
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjokcanPanel;
}
/**
 * Return the okcanPanelFlowLayout property value.
 * @return java.awt.FlowLayout
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.FlowLayout getokcanPanelFlowLayout() {
    java.awt.FlowLayout ivjokcanPanelFlowLayout = null;
    try {
        /* Create part */
        ivjokcanPanelFlowLayout = new java.awt.FlowLayout();
        ivjokcanPanelFlowLayout.setVgap(10);
        ivjokcanPanelFlowLayout.setHgap(10);
    } catch (java.lang.Throwable ivjExc) {
        handleException(ivjExc);
    };
    return ivjokcanPanelFlowLayout;
}
/**
 * Return the okPanel property value.
 * @return java.awt.Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.Panel getokPanel() {
    if (ivjokPanel == null) {
        try {
            ivjokPanel = new java.awt.Panel();
            ivjokPanel.setName("okPanel");
            ivjokPanel.setLayout(new java.awt.FlowLayout());
            ivjokPanel.add(getokBut2(), getokBut2().getName());
            // user code begin {1}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {2}
            // user code end
            handleException(ivjExc);
        }
    };
    return ivjokPanel;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(Throwable exception) {
    /* Uncomment the following lines to print uncaught exceptions to stdout */
    // System.out.println("--------- UNCAUGHT EXCEPTION ---------");
    // exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() {
    // user code begin {1}
    
    // Add ActionListeners for the Buttons
    
    ivjokBut.addActionListener(this);
    ivjcanBut.addActionListener(this);
    ivjokBut2.addActionListener(this);
    
    //Add KeyListeners for Buttons
    ivjokBut.addKeyListener(this);
    ivjcanBut.addKeyListener(this);
    ivjokBut2.addKeyListener(this);
    
    this.addWindowListener(this);
    // user code end
    
}
/**
 * Initialize class
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
    // user code begin {1}
    // user code end
    java.awt.GridBagConstraints constraintslabMessage = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsokPanel = new java.awt.GridBagConstraints();
    java.awt.GridBagConstraints constraintsokcanPanel = new java.awt.GridBagConstraints();
    setName("InfoDialog");
    setName("InfoDialog");
    setLayout(new java.awt.GridBagLayout());
    setSize(236, 89);
        
    constraintslabMessage.gridx = 0; constraintslabMessage.gridy = 0;
    constraintslabMessage.gridwidth = 5; constraintslabMessage.gridheight = 3;
    constraintslabMessage.fill = java.awt.GridBagConstraints.BOTH;
    constraintslabMessage.anchor = java.awt.GridBagConstraints.CENTER;
    constraintslabMessage.weightx = 1.0;
    constraintslabMessage.weighty = 1.0;
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getlabMessage(), constraintslabMessage);
    this.add(getlabMessage());
    constraintsokPanel.gridx = 0; constraintsokPanel.gridy = 4;
    constraintsokPanel.gridwidth = 5; constraintsokPanel.gridheight = 1;
    constraintsokPanel.fill = java.awt.GridBagConstraints.HORIZONTAL;
    constraintsokPanel.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsokPanel.weightx = 1.0;
    constraintsokPanel.weighty = 0.0;
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getokPanel(), constraintsokPanel);
    this.add(getokPanel());
    constraintsokcanPanel.gridx = 0; constraintsokcanPanel.gridy = 3;
    constraintsokcanPanel.gridwidth = 5; constraintsokcanPanel.gridheight = 1;
    constraintsokcanPanel.fill = java.awt.GridBagConstraints.HORIZONTAL;
    constraintsokcanPanel.anchor = java.awt.GridBagConstraints.CENTER;
    constraintsokcanPanel.weightx = 1.0;
    constraintsokcanPanel.weighty = 0.0;
    ((java.awt.GridBagLayout) this.getLayout()).setConstraints(getokcanPanel(), constraintsokcanPanel);
    this.add(getokcanPanel());
    
    // user code begin {2}
     
   // Set modal & Set not Resizable
   setModal(true);
   setResizable(false);
   
   if (butParameter==true)
   {
      // Show the ok & cancel button panel only.
      getokcanPanel().setVisible(true);
      getokPanel().setVisible(false);
   }    
   else
   {
        // Show the ok button panel only.
        getokcanPanel().setVisible(false);
       getokPanel().setVisible(true);  
   }    
   //Layout the label and it's parent
   getlabMessage().invalidate();
   //Layout the dialog again
   validate();
    // user code end
    
    initConnections();
}
  @Override
  public void keyPressed(java.awt.event.KeyEvent key)
  {
        if (key.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            if (key.getSource().equals(getokBut()) ||key.getSource().equals(getokBut2())){
                //Set the response as true
                this.myParent.setInfoResponse("true");
            }
            else if (key.getSource().equals(getcanBut()))
            {
                this.myParent.setInfoResponse("false");
            }
            this.dispose();
        }   
        return;
  }                 
  @Override
  public void keyReleased(java.awt.event.KeyEvent key)
  {
  }         
  @Override
  public void keyTyped(java.awt.event.KeyEvent key)
  {
  }         
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
 /*
public static void main(java.lang.String[] args) {
    try {
        com.ibm.network.ftp.ui.InfoDialog aInfoDialog = new com.ibm.network.ftp.ui.InfoDialog(new java.awt.Frame());
        aInfoDialog.setModal(true);
        try {
            Class aCloserClass = Class.forName("uvm.abt.edit.WindowCloser");
            Class parmTypes[] = { java.awt.Window.class };
            Object parms[] = { aInfoDialog };
            java.lang.reflect.Constructor aCtor = aCloserClass.getConstructor(parmTypes);
            aCtor.newInstance(parms);
        } catch (java.lang.Throwable exc) {};
        aInfoDialog.setVisible(true);
    } catch (Throwable exception) {
        System.err.println("Exception occurred in main() of java.awt.Dialog");
    }
}
*/
    public void setButtonsBackground(java.awt.Color newColor)
    {
        if (newColor!=null)
        {
            //Change the Background of all buttons
            getokBut().setBackground(newColor);
            getokBut2().setBackground(newColor);
            getcanBut().setBackground(newColor);
        }   
    }
    public void setButtonsForeground(java.awt.Color newColor)
    {
        if (newColor!=null)
        {
            //Change the Foreground of all buttons
            
            getokBut().setForeground(newColor);
            getokBut2().setForeground(newColor);            
            getcanBut().setForeground(newColor);
        }   
    }
    public void setDialogBackground(java.awt.Color newColor)
    {
        if (newColor!=null)
        {
            this.setBackground(newColor);
            
            //Set the Panels' color
            getokPanel().setBackground(newColor);
            getokcanPanel().setBackground(newColor);
            
            //Change the Background of each labels
            getlabMessage().setBackground(newColor);
        }   
    }
    public void setLabelsForeground(java.awt.Color newColor)
    {
        if (newColor!=null)
        {
            //Change the Foreground of all Labels
            getlabMessage().setForeground(newColor);
        }   
    }
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
@Override
public void windowActivated(java.awt.event.WindowEvent e) {
    // user code begin {1}
    
    // Set Focus in first Field
    if (butParameter==true)
    {
        this.getcanBut().requestFocus();
    }
    else
    {
        this.getokBut2().requestFocus();
    }   
        
    // user code end
    // user code begin {2}
    // user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
@Override
public void windowClosed(java.awt.event.WindowEvent e) {
    // user code begin {1}
    // user code end
    // user code begin {2}
    // user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
@Override
public void windowClosing(java.awt.event.WindowEvent e) {
    // user code begin {1}
    // user code end
    if ((e.getSource() == this) ) {
        conn0(e);
    }
    // user code begin {2}
    // user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
@Override
public void windowDeactivated(java.awt.event.WindowEvent e) {
    // user code begin {1}
    // user code end
    // user code begin {2}
    // user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
@Override
public void windowDeiconified(java.awt.event.WindowEvent e) {
    // user code begin {1}
    // user code end
    // user code begin {2}
    // user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
@Override
public void windowIconified(java.awt.event.WindowEvent e) {
    // user code begin {1}
    // user code end
    // user code begin {2}
    // user code end
}
/**
 * Method to handle events for the WindowListener interface.
 * @param e java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
@Override
public void windowOpened(java.awt.event.WindowEvent e) {
    // user code begin {1}
    // user code end
    // user code begin {2}
    // user code end
}
}
