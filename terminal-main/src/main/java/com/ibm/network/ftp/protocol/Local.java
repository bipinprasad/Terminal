/************************************************************************
  This software is subject to the terms of the IBM alphaBeans with Source 
  License Agreement available at 
  www.software.ibm.com/developer/alphabeans/source/license.html.
  
  Copyright (c) 1999 IBM Corporation and others. All rights reserved. 
  
  You must accept the terms of that agreement to use this software.
*************************************************************************/
  
package com.ibm.network.ftp.protocol;
import java.io.File;
import java.util.Properties;
import java.util.Vector;
import com.ibm.network.ftp.FileInfo;
/**
 * This class was generated by a SmartGuide.
 * 
 */
class Local extends Protocol {
	//private static Local instance=null;
	private FTPProtocol parent;
	private String localCurrentDir;
	private Vector<FileInfo> localFileList;
/**
 * This method was created by a SmartGuide.
 */
Local (FTPProtocol parent ) {
	this.parent=parent;
	this.localCurrentDir=this.getCurrentDir();
	this.localFileList=this.fileList();
}
/**
 * changeDir method comment.
 */
@Override
public void changeDir(String newDirString) {
	//if the user enters current directory ie "."
	if(newDirString.equals(".")){
		printText("lcd "+newDirString+"\n");
		return;
	}	
	//If the user wants to change to parent directory
	if(newDirString.equals("..")){
		Properties properties=new Properties(System.getProperties());	 
		//Find out the current working directory
		String currentDirString=System.getProperty("user.dir");
		//create a file object for current directory
		File currentDir=new File(currentDirString);
		//Get the parent directory
		String parentDirString=currentDir.getParent();
	
		if(parentDirString!=null){
			properties.put("user.dir",parentDirString);
			System.setProperties(properties);
			printText("lcd "+newDirString+"\n");
		}
		else{//parent doesn't exist	
			printText("lcd "+newDirString+"\n");
			printText("The parent directory doesn't exist \n");
		}
		return;	
		
	}	
		
	//This variable will store the system properties
	Properties properties=new Properties(System.getProperties());	 
	//Find out the current working directory
	String currentDirString=System.getProperty("user.dir");
	//create a file object for current directory
	File currentDir=new File(currentDirString);
	//Create a file object of the new directory
	File newDir=new File(newDirString);
	
	//If the current dir string end with"/" and user gives
	//relative name then two "/" will appear. Hence remove
	// that.
	if(currentDirString.endsWith("\\")){
		int length=currentDirString.length();
		currentDirString=new String(currentDirString.substring(0,length-1));
	}	
	
	//The file name provide can be either absolute or remote
	if(newDir.isAbsolute()){
		//if the filename provided is absolute
		if(newDir.isDirectory()){
			//the new name has to be a directory then only cahnge
			// the properties.
			properties.put("user.dir",newDirString);
			System.setProperties(properties);
			printText("lcd "+newDirString+"\n");
			return;
		}//end of inner if	
	}//end of outer if
	//if new dir is ".." i.e the parent, then change to parent
	else if(newDir.equals("..")){
		String parentDir=currentDir.getParent();
		if(parentDir!=null){
			properties.put("user.dir",parentDir);
			System.setProperties(properties);
			printText("lcd ..");
		}//end of if
		else{
			printText("no parent dir"+"\n");
		}//end of else
		return;					
	}//end of else if	
	//if the path is relative and we have to move down	
	else if((new File(currentDirString + File.separatorChar + newDirString)).isDirectory()){
	//else if((new File(currentDir, newDirString)).isDirectory()){
		String childDir=new String(currentDirString+File.separatorChar+newDirString);
		if(childDir!=null){//in case the childdir is not null
			properties.put("user.dir",childDir);
			System.setProperties(properties);
			printText("lcd   "+newDirString+"\n");
			return;
		}//end of if
	}//end of else if
	printText("Directory "+newDirString+" not found"+"\n");
	return;				
}			
/**
 * deleteDir method comment.
 */
@Override
public void deleteDir(String dirName) {
	//find out the current Directory
	String currentDir=System.getProperty("user.dir");
	//Create a file object with the given directory name
	File file=new File(currentDir+File.separatorChar+dirName);
	//show in  the status the command issued
	printText("del  "+dirName+"\n");
	//check whether the directory exists
	if(file.exists()){
		//check if it is directory
		if(file.isDirectory()){
			//if it exists and is file then it can be deleted
			if(file.delete()){
				//if the deletion succeeds
				printText("deleted file  "+dirName + "\n");
			}//end of inner most if
			else {
				//file deletion fails
				printText("could not delete file "+dirName+" may not be empty \n");
			}//end of else
		}//end of middle if
	}//end of outer most if
	else{
		printText("file  "+dirName+"  doesn't exists \n");
	}	
}
/**
 * deleteFile method comment.
 */
@Override
public void deleteFile(String fileName) {
	//find out the current Directory
	String currentDir=System.getProperty("user.dir");
	//Create a file object with the given filename
	File file=new File(currentDir+File.separatorChar+fileName);
	//show in  the status the command issued
	printText("del  "+fileName);
	printText("\n");
	//check whether the file exists
	if(file.exists()){
		//check if it is directory
		if(file.isFile()){
			//if it exists and is file then it can be deleted
			if(file.delete()){
				//if the deletion succeeds
				printText("deleted file  "+fileName);
				printText("\n");
			}//end of inner most if
			else {
				//file deletion fails
				printText("could not delete file  "+fileName);
			}//end of else
		}//end of middle if
		else{//if not file then directory
			if(file.delete()){
				//if the deletion succeeds
				printText("deleted file  "+fileName);
				printText("\n");
			}//end of inner most if
			else {
				//file deletion fails
				printText("could not delete file "+fileName+"may not be empty \n");
			}//end of else
		}//end of else for directory	
	}//end of outer most if
	else{
		printText("file  "+fileName+"  doesn't exists");
	}		  								
}
/**
 * fileList method comment.
 */
@Override
public java.util.Vector<FileInfo> fileList() {
	FileInfo fileInfo;
	Vector<FileInfo> fileList =null;
	//print the command on the status window
	printText("local file list\n");
	
	//get the current working dir
	String currentDirString=System.getProperty("user.dir");
	
	//Since for c:\, the File.list() API is not working,
	//Add "." after the "\".
	int dirLength=currentDirString.length();
		
	if (currentDirString.charAt(dirLength-1)==java.io.File.separatorChar)		
	{
		currentDirString=currentDirString+".";
	}	
	//create a file object with it
	File currentDir=new File(currentDirString);
	
	//list all the files inside it
	String fileListString[]=currentDir.list();
	fileList=new Vector<FileInfo>();
	
	//first the current directory and parent directory
	// into the vector
	//for current directory
	/*fileInfo(currentDirString,currentDir.parent());
	fileInfo.setName(".");*/
	//set the values for parent directory
	
	
	
	//loop  through the list and set the description for
	//each of the file info

	if (fileListString != null)
	{
		for(int i=0;i<fileListString.length;i++)
		{
			fileInfo=new FileInfo();
			fileInfo.setLocalDescription(fileListString[i],currentDirString);
			fileList.addElement(fileInfo);
		}
	}
	this.localFileList=fileList;
	return fileList;
}
/**
 * getCurrentDir method comment.
 */
@Override
public String getCurrentDir() {
	String currentDir =System.getProperty("user.dir");
	this.localCurrentDir=currentDir;
	return currentDir;
}
/**
 * This method was created by a SmartGuide.
 * @return java.lang.String
 */
public String getLocalCurrentDir( ) {
	return localCurrentDir;
}
/**
 * This method was created by a SmartGuide.
 * @return java.util.Vector
 */
public java.util.Vector<FileInfo> getLocalFileList( ) {
	return this.localFileList;
}
/**
 * This method was created by a SmartGuide.
 * @return FTPProtocolBean.Protocol
 */
/** BIPIN
public static Local getLocalProtocol(FTPProtocol parent ) {
	//if instance is not null then create a instance and return.
	if(instance==null)	{
		instance=new Local(parent);
	}
	return instance;
	return new Local(parent);
}
*/
/**
 * makeDir method comment.
 */
@Override
public void makeDir(String dirName) {
	String currentDir=System.getProperty("user.dir");
	printText("mkdir "+dirName+"\n");
	//create a file object with the given directory name
	File file=new File(currentDir+File.separatorChar+dirName);
	if(!file.exists()){
		if(file.mkdirs()){
			printText("Created directory "+dirName+"\n");
		}//end of if
		else{
			printText("Could not create directory "+dirName+"\n");		
		}//end of else
	}//end of outer if
	else{
		printText(dirName +" already exists");
	}//end of else					
}
/**
 * printText method comment.
 */
@Override
protected void printText(String text) {
	//Send the string received to the parent bean to be sent back
	// to the User Interface bean
	this.parent.sendMessage(text);
}
/**
 * rename method comment.
 */
@Override
public void rename(String oldName, String newName) {
	//Get the current working dir first
	String currentDir=System.getProperty("user.dir");
	//display the command
	printText("rename "+oldName+"  "+newName+"\n");
	
	if( (new File(newName)).isAbsolute() ) {
		printText("ERROR: You tried replacing relative path " +
		  oldName + " with absolute path " + newName + "\n");
	}//end of if
	else {
		File oldFile = new File(currentDir + File.separatorChar + oldName);
	  	File newFile = new File(currentDir + File.separatorChar + newName);
	  	if( oldFile.exists() ) {//check if the file exists
			if(oldFile.renameTo(newFile)){
				printText("renamed  "+oldName+" to "+newName+"\n");
			}//end of inner if
			else{	
				printText("could not rename  "+oldName+" to "+newName+"\n");
	  		}//end of inner else	
	  	}//end of outer if
	  		
	}//end of else
}
}
