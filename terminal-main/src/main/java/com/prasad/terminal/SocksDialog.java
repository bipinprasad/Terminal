/************************************************************************
 This software is subject to the terms of the IBM alphaBeans with Source
 License Agreement available at
 www.software.ibm.com/developer/alphabeans/source/license.html.

 Copyright (c) 1999 IBM Corporation and others. All rights reserved.

 You must accept the terms of that agreement to use this software.
 *************************************************************************/

package com.prasad.terminal;

import java.awt.event.ActionListener;
import java.awt.event.WindowListener;

/**
 * This class was generated by a SmartGuide.
 */
class SocksDialog extends java.awt.Dialog implements java.awt.event.ActionListener, java.awt.event.WindowListener, java.awt.event.KeyListener {
    private java.awt.Button ivjcanBut = null;
    private java.awt.Label ivjlabSocksHost = null;
    private java.awt.Label ivjlabSocksPort = null;
    private java.awt.Button ivjokBut = null;
    private java.awt.Panel ivjPanel1 = null;
    private java.awt.FlowLayout ivjPanel1FlowLayout = null;
    private java.awt.Panel ivjPanel2 = null;
    private java.awt.FlowLayout ivjPanel2FlowLayout = null;
    private java.awt.Panel ivjPanel3 = null;
    private java.awt.FlowLayout ivjPanel3FlowLayout = null;
    private java.awt.GridLayout ivjSocksDialogGridLayout = null;
    private java.awt.TextField ivjtexPort = null;
    private java.awt.TextField ivjtexSocksHost = null;
    //For passing the data to the parent
    SocksInterface myParent;

    /**
     * Constructor
     *
     * @param parent Symbol
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    public SocksDialog(java.awt.Frame parent) {
        super(parent);
        initialize();
    }

    public SocksDialog(java.awt.Frame frm, SocksInterface socksInterface) {
        super(frm);

        //Set the parent,for passing the Socks data back
        this.myParent = socksInterface;

        initialize();
    }

    /**
     * SocksDialog constructor comment.
     *
     * @param parent java.awt.Frame
     * @param title  java.lang.String
     */
    public SocksDialog(java.awt.Frame parent, String title) {
        super(parent, title);
        initialize();
    }

    /**
     * SocksDialog constructor comment.
     *
     * @param parent java.awt.Frame
     * @param title  java.lang.String
     * @param modal  boolean
     */
    public SocksDialog(java.awt.Frame parent, String title, boolean modal) {
        super(parent, title, modal);
        initialize();
    }

    /**
     * SocksDialog constructor comment.
     *
     * @param parent java.awt.Frame
     * @param modal  boolean
     */
    public SocksDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initialize();
    }

    /**
     * actionPerformed method comment.
     */
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource().equals(ivjokBut)) {
            //Pass the parameters to the parent
            this.myParent.setSocksInfo(ivjtexSocksHost.getText(), ivjtexPort.getText().trim());

            //Don't dispose the dialog
            //if the arguments are not proper
            String socksHost = ivjtexSocksHost.getText();
            String socksPort = ivjtexPort.getText().trim();

            if (!socksHost.equals("") && !socksPort.equals("")) {
                this.dispose();
            } else
                this.requestFocus();
        } else  //For cancel button
            this.dispose();

    }

    /**
     * conn0:  (SocksDialog.window.windowClosing(java.awt.event.WindowEvent) --> SocksDialog.dispose())
     *
     * @param arg1 java.awt.event.WindowEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void conn0(java.awt.event.WindowEvent arg1) {
        try {
            // user code begin {1}
            // user code end
            this.dispose();
            // user code begin {2}
            // user code end
        } catch (java.lang.Throwable ivjExc) {
            // user code begin {3}
            // user code end
            handleException(ivjExc);
        }
    }

    /**
     * Return the canBut property value.
     *
     * @return java.awt.Button
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.Button getcanBut() {
        if (ivjcanBut == null) {
            try {
                ivjcanBut = new java.awt.Button();
                ivjcanBut.setName("canBut");
                ivjcanBut.setLabel("Cancel");
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjcanBut;
    }

    /**
     * Return the labSocksHost property value.
     *
     * @return java.awt.Label
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.Label getlabSocksHost() {
        if (ivjlabSocksHost == null) {
            try {
                ivjlabSocksHost = new java.awt.Label();
                ivjlabSocksHost.setName("labSocksHost");
                ivjlabSocksHost.setAlignment(java.awt.Label.CENTER);
                ivjlabSocksHost.setText("Socks Host:");
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjlabSocksHost;
    }

    /**
     * Return the labSocksPort property value.
     *
     * @return java.awt.Label
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.Label getlabSocksPort() {
        if (ivjlabSocksPort == null) {
            try {
                ivjlabSocksPort = new java.awt.Label();
                ivjlabSocksPort.setName("labSocksPort");
                ivjlabSocksPort.setAlignment(java.awt.Label.CENTER);
                ivjlabSocksPort.setText("Socks Port: ");
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjlabSocksPort;
    }

    /**
     * Return the okBut property value.
     *
     * @return java.awt.Button
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.Button getokBut() {
        if (ivjokBut == null) {
            try {
                ivjokBut = new java.awt.Button();
                ivjokBut.setName("okBut");
                ivjokBut.setLabel("    Ok    ");
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjokBut;
    }

    /**
     * Return the Panel1 property value.
     *
     * @return java.awt.Panel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.Panel getPanel1() {
        if (ivjPanel1 == null) {
            try {
                ivjPanel1 = new java.awt.Panel();
                ivjPanel1.setName("Panel1");
                ivjPanel1.setLayout(getPanel1FlowLayout());
                ivjPanel1.add(getlabSocksHost(), getlabSocksHost().getName());
                ivjPanel1.add(gettexSocksHost(), gettexSocksHost().getName());
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjPanel1;
    }

    /**
     * Return the Panel1FlowLayout property value.
     *
     * @return java.awt.FlowLayout
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.FlowLayout getPanel1FlowLayout() {
        java.awt.FlowLayout ivjPanel1FlowLayout = null;
        try {
            /* Create part */
            ivjPanel1FlowLayout = new java.awt.FlowLayout();
            ivjPanel1FlowLayout.setVgap(10);
            ivjPanel1FlowLayout.setHgap(20);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
        ;
        return ivjPanel1FlowLayout;
    }

    /**
     * Return the Panel2 property value.
     *
     * @return java.awt.Panel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.Panel getPanel2() {
        if (ivjPanel2 == null) {
            try {
                ivjPanel2 = new java.awt.Panel();
                ivjPanel2.setName("Panel2");
                ivjPanel2.setLayout(getPanel2FlowLayout());
                ivjPanel2.add(getlabSocksPort(), getlabSocksPort().getName());
                ivjPanel2.add(gettexPort(), gettexPort().getName());
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjPanel2;
    }

    /**
     * Return the Panel2FlowLayout property value.
     *
     * @return java.awt.FlowLayout
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.FlowLayout getPanel2FlowLayout() {
        java.awt.FlowLayout ivjPanel2FlowLayout = null;
        try {
            /* Create part */
            ivjPanel2FlowLayout = new java.awt.FlowLayout();
            ivjPanel2FlowLayout.setVgap(10);
            ivjPanel2FlowLayout.setHgap(20);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
        ;
        return ivjPanel2FlowLayout;
    }

    /**
     * Return the Panel3 property value.
     *
     * @return java.awt.Panel
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.Panel getPanel3() {
        if (ivjPanel3 == null) {
            try {
                ivjPanel3 = new java.awt.Panel();
                ivjPanel3.setName("Panel3");
                ivjPanel3.setLayout(getPanel3FlowLayout());
                ivjPanel3.add(getokBut(), getokBut().getName());
                ivjPanel3.add(getcanBut(), getcanBut().getName());
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjPanel3;
    }

    /**
     * Return the Panel3FlowLayout property value.
     *
     * @return java.awt.FlowLayout
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.FlowLayout getPanel3FlowLayout() {
        java.awt.FlowLayout ivjPanel3FlowLayout = null;
        try {
            /* Create part */
            ivjPanel3FlowLayout = new java.awt.FlowLayout();
            ivjPanel3FlowLayout.setVgap(10);
            ivjPanel3FlowLayout.setHgap(20);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
        ;
        return ivjPanel3FlowLayout;
    }

    /**
     * Return the SocksDialogGridLayout property value.
     *
     * @return java.awt.GridLayout
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.GridLayout getSocksDialogGridLayout() {
        java.awt.GridLayout ivjSocksDialogGridLayout = null;
        try {
            /* Create part */
            ivjSocksDialogGridLayout = new java.awt.GridLayout(3, 1);
            ivjSocksDialogGridLayout.setHgap(5);
        } catch (java.lang.Throwable ivjExc) {
            handleException(ivjExc);
        }
        ;
        return ivjSocksDialogGridLayout;
    }

    /**
     * Return the texPort property value.
     *
     * @return java.awt.TextField
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.TextField gettexPort() {
        if (ivjtexPort == null) {
            try {
                ivjtexPort = new java.awt.TextField();
                ivjtexPort.setName("texPort");
                ivjtexPort.setBackground(java.awt.Color.white);
                ivjtexPort.setColumns(15);
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjtexPort;
    }

    /**
     * Return the texSocksHost property value.
     *
     * @return java.awt.TextField
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private java.awt.TextField gettexSocksHost() {
        if (ivjtexSocksHost == null) {
            try {
                ivjtexSocksHost = new java.awt.TextField();
                ivjtexSocksHost.setName("texSocksHost");
                ivjtexSocksHost.setBackground(java.awt.Color.white);
                ivjtexSocksHost.setColumns(15);
                // user code begin {1}
                // user code end
            } catch (java.lang.Throwable ivjExc) {
                // user code begin {2}
                // user code end
                handleException(ivjExc);
            }
        }
        ;
        return ivjtexSocksHost;
    }

    /**
     * Called whenever the part throws an exception.
     *
     * @param exception java.lang.Throwable
     */
    private void handleException(Throwable exception) {
        /* Uncomment the following lines to print uncaught exceptions to stdout */
        // System.out.println("--------- UNCAUGHT EXCEPTION ---------");
        // exception.printStackTrace(System.out);
    }

    /**
     * Initializes connections
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void initConnections() {
        // user code begin {1}

        //Add ActionListeners for OK & Cancel Buttons

        ivjokBut.addActionListener(this);
        ivjcanBut.addActionListener(this);

        //Add KeyListeners for Buttons and Text field
        ivjokBut.addKeyListener(this);
        ivjcanBut.addKeyListener(this);
        gettexPort().addKeyListener(this);

        // user code end
        this.addWindowListener(this);


    }

    /**
     * Initialize class
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    private void initialize() {
        // user code begin {1}
        // user code end
        setName("SocksDialog");
        setName("SocksDialog");
        setTitle("Socks Server Details");
        setLayout(getSocksDialogGridLayout());
        //setSize(283, 123);
        setLabelsFont(new java.awt.Font("Helvetica", java.awt.Font.PLAIN, 20));

        setTitle("Socks Dialog");
        setModal(true);
        setResizable(false);
        add(getPanel1(), getPanel1().getName());
        add(getPanel2(), getPanel2().getName());
        add(getPanel3(), getPanel3().getName());
        initConnections();
        // user code begin {2}

        this.pack();
        // user code end
    }

    @Override
    public void keyPressed(java.awt.event.KeyEvent key) {
        if (key.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            if (key.getSource().equals(ivjokBut) || key.getSource().equals(gettexPort())) {
                //Pass the parameters to the parent
                this.myParent.setSocksInfo(ivjtexSocksHost.getText(), ivjtexPort.getText().trim());

                //Set the Focus in the Dialog itself
                //if the arguments are not proper
                String socksHost = ivjtexSocksHost.getText();
                String socksPort = ivjtexPort.getText().trim();
                if (!socksHost.equals("") && !socksPort.equals("")) {
                    this.dispose();
                } else
                    this.requestFocus();
            } else  //For cancel button
                this.dispose();
        }
        return;
    }

    @Override
    public void keyReleased(java.awt.event.KeyEvent key) {
    }

    @Override
    public void keyTyped(java.awt.event.KeyEvent key) {
    }

    /**
     * main entrypoint - starts the part when it is run as an application
     *
     * @param args java.lang.String[]
     */
 /*
public static void main(java.lang.String[] args) {
    try {
        com.ibm.network.ftp.ui.SocksDialog aSocksDialog = new com.ibm.network.ftp.ui.SocksDialog(new java.awt.Frame());
        aSocksDialog.setModal(true);
        try {
            Class aCloserClass = Class.forName("uvm.abt.edit.WindowCloser");
            Class parmTypes[] = { java.awt.Window.class };
            Object parms[] = { aSocksDialog };
            java.lang.reflect.Constructor aCtor = aCloserClass.getConstructor(parmTypes);
            aCtor.newInstance(parms);
        } catch (java.lang.Throwable exc) {};
        aSocksDialog.setVisible(true);
    } catch (Throwable exception) {
        System.err.println("Exception occurred in main() of java.awt.Dialog");
    }
}
*/
    public void setButtonsBackground(java.awt.Color newColor) {
        if (newColor != null) {
            //Change the Background of all buttons
            getokBut().setBackground(newColor);
            getcanBut().setBackground(newColor);
        }
    }

    public void setButtonsFont(java.awt.Font newFont) {
        if (newFont != null) {
            //Change the Font of all buttons
            getokBut().setFont(newFont);
            getcanBut().setFont(newFont);
        }
    }

    public void setButtonsForeground(java.awt.Color newColor) {
        if (newColor != null) {
            //Change the Foreground of all buttons
            getokBut().setForeground(newColor);
            getcanBut().setForeground(newColor);
        }
    }

    public void setDialogBackground(java.awt.Color newColor) {
        if (newColor != null) {
            this.setBackground(newColor);

            //Set the Panels' color
            getPanel1().setBackground(newColor);
            getPanel2().setBackground(newColor);
            getPanel3().setBackground(newColor);

            //Change the Background of each labels
            getlabSocksHost().setBackground(newColor);
            getlabSocksPort().setBackground(newColor);
        }
    }

    public void setLabelsFont(java.awt.Font newFont) {
        if (newFont != null) {
            //Change the Font of all Labels
            getlabSocksHost().setFont(newFont);
            getlabSocksPort().setFont(newFont);
        }
    }

    public void setLabelsForeground(java.awt.Color newColor) {
        if (newColor != null) {
            //Change the Foreground of all Labels
            getlabSocksHost().setForeground(newColor);
            getlabSocksPort().setForeground(newColor);
        }
    }

    public void setTextBackground(java.awt.Color newColor) {
        if (newColor != null) {
            //Change the Background of all text fields
            gettexSocksHost().setBackground(newColor);
            gettexPort().setBackground(newColor);

        }
    }

    /**
     * Method to handle events for the WindowListener interface.
     *
     * @param e java.awt.event.WindowEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    @Override
    public void windowActivated(java.awt.event.WindowEvent e) {
        // user code begin {1}

        // Set Focus in first Text Field

        this.gettexSocksHost().requestFocus();

        // user code end
        // user code begin {2}
        // user code end
    }

    /**
     * Method to handle events for the WindowListener interface.
     *
     * @param e java.awt.event.WindowEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    @Override
    public void windowClosed(java.awt.event.WindowEvent e) {
        // user code begin {1}
        // user code end
        // user code begin {2}
        // user code end
    }

    /**
     * Method to handle events for the WindowListener interface.
     *
     * @param e java.awt.event.WindowEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    @Override
    public void windowClosing(java.awt.event.WindowEvent e) {
        // user code begin {1}
        // user code end
        if ((e.getSource() == this)) {
            conn0(e);
        }
        // user code begin {2}
        // user code end
    }

    /**
     * Method to handle events for the WindowListener interface.
     *
     * @param e java.awt.event.WindowEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    @Override
    public void windowDeactivated(java.awt.event.WindowEvent e) {
        // user code begin {1}
        // user code end
        // user code begin {2}
        // user code end
    }

    /**
     * Method to handle events for the WindowListener interface.
     *
     * @param e java.awt.event.WindowEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    @Override
    public void windowDeiconified(java.awt.event.WindowEvent e) {
        // user code begin {1}
        // user code end
        // user code begin {2}
        // user code end
    }

    /**
     * Method to handle events for the WindowListener interface.
     *
     * @param e java.awt.event.WindowEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    @Override
    public void windowIconified(java.awt.event.WindowEvent e) {
        // user code begin {1}
        // user code end
        // user code begin {2}
        // user code end
    }

    /**
     * Method to handle events for the WindowListener interface.
     *
     * @param e java.awt.event.WindowEvent
     */
    /* WARNING: THIS METHOD WILL BE REGENERATED. */
    @Override
    public void windowOpened(java.awt.event.WindowEvent e) {
        // user code begin {1}
        // user code end
        // user code begin {2}
        // user code end
    }
}
